from django.shortcuts import render_to_response
from django.template import RequestContext
from django.db.models import Q
from django.views.generic.list_detail import object_list
from django.contrib.auth.decorators import login_required
from models import MediaItem, MediaItemOwnership, MediaLoan
from forms import MediaItemSearchForm
from tools import count_books_in_library

#----------------------------------------------------------------------------
# Views
#----------------------------------------------------------------------------
@login_required
def show_search_form(request):
	return render_to_response("library/search.html", {"library_size": count_books_in_library(), "search_form": MediaItemSearchForm() }, context_instance=RequestContext(request))

@login_required
def search(request):
	from built import to_previous_page
	if request.method != "GET": return to_previous_page(request)

	isbn = request.GET['isbn'].strip().upper()
	title = request.GET['title'].strip()
	author = request.GET['author'].strip()

	# Since we provide three fields which are ANDed together to form a query, we don't want to include
	# blanks. So we piece together our query like so:
	query = []
	
	if isbn:
		query += [ Q(isbn__exact = isbn) ]

	if title:
		query += [ Q(title__icontains=title) ]

	if author:
		query += [ Q(author__icontains=author) ]
	
	return object_list(request, queryset = MediaItem.objects.filter(*query), template_name="library/list.html")


@login_required
def show_my_library(request):

	#my_library = MediaItem.objects.filter(mediaitemownership__owner=request.user)
	my_library = MediaItemOwnership.objects.filter(owner=request.user)
	
	return object_list(request, queryset = my_library, template_name="library/user/list.html", extra_context={'loaned_items': [1, 2, 3]})


@login_required
def show_my_loans(request):
	"""
	Show the books this user has loaned out to other users.
	"""
#	return object_list(request, queryset = MediaItem.objects.filter(mediaitemownership__medialoan__item__owner__username__exact=request.user.username), template_name="library/user/loaned.html")
	return object_list(request, queryset = MediaLoan.objects.filter(item__owner=request.user), template_name="library/user/loaned.html")


@login_required
def show_my_borrows(request):
	"""
	Show the books this user has loaned out to other users.
	"""
#	return object_list(request, queryset = MediaItem.objects.filter(mediaitemownership__medialoan__borrower__username__exact=request.user.username), template_name="library/user/borrowed.html")
	return object_list(request, queryset = MediaLoan.objects.filter(borrower=request.user), template_name="library/user/borrowed.html")

@login_required
def show_new_book_form(request):
	return render_to_response("book/editor.html", {"book_form": BookForm() }, context_instance=RequestContext(request))
